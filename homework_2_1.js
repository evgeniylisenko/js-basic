// это конкатенация, сначала к строке приклеивается 23 на выходе получаем 'number23' и потом приклеивается 32, получаем 'number2332'
'number' + 23 + 32

// тут сначала будет математическая операция, код читаем слева на право 41 + 1 = 42, потом приклеивается 'number', на выходе '42number'
41 + 1 + 'number'

// null воспринимается как число, в результате будет 1
null + 1

// второй плюс перед строкой пытается преобразовать в число, но так как строка имеет символы мы получаем NaN, и в результате происходит конкатенация, что дает нам 'fiveNaN'
'five' + + 'two'

// Оператор условия "и", который возвращает последнее значение true или первое false, в данному выражении мы получим 7
2 && 7

// + перед строкой преобразовывает в число и в результате мы получаем 42
+'40' + +'2';

// если после строки идет знак - * /, то строка преобразуется в число, 10 - 5 = 5, следующий шаг строгое сравнение 5 === 6, в итоге false
'10' - 5 === 6;

// в этому примере происходит преобразование к числам, true = 1, false = 0, 1 + 0 = 1
true + false

// если после строки идет знак - * /, то строка питается преобразоватся в число, так как в строке присутствуют символы, мы получаем NaN, и вычесление не продолжается
'4px' - 3

// если после строки идет знак - * /, то строка преобразуется в число, 4 - 3 = 1
'4' - 3

// возведение в степень 3 ** 2 = 9, после происходит конкатенация '29'
'2' + 3 ** 2;

// если перед строкой идет знак - * /, то строка преобразуется в число, 12 / 6 = 2
12 / '6'

// тут сначала будет математическая операция, код читаем слева на право 23 + 42 = 65, потом приклеивается 'number', на выходе '65number'
23 + 42 + 'number'

// сначала происходит действие в (5 === 6), получаем false, потом происходит конкатенация, и получаем '10false'
'10' + (5 === 6);

// это конкатенация, сначала к строке приклеивается 15 на выходе получаем 'number15' и потом приклеивается 3, получаем 'number153'
'number' + 15 + 3